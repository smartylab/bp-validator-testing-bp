<!-- CommTestBP BPEL Process [Generated by the Eclipse BPEL Designer] -->
<!-- Date: Wed Apr 01 14:04:48 KST 2015 -->
<bpel:process name="CommTestBP"
         targetNamespace="kr.co.smartylab"
         suppressJoinFailure="yes"
         xmlns:tns="kr.co.smartylab"
         xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:ns="http://smartylab.co.kr/products/op/adapter">

    <!-- Import the client WSDL -->
    <bpel:import namespace="http://smartylab.co.kr/products/op/adapter" location="concert_adapter.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"></bpel:import>
    <bpel:import location="CommTestBPArtifacts.wsdl" namespace="kr.co.smartylab" 
	        importType="http://schemas.xmlsoap.org/wsdl/" />
         
    <!-- ================================================================= -->         
    <!-- PARTNERLINKS                                                      -->
    <!-- List of services participating in this BPEL process               -->
    <!-- ================================================================= -->         
    <bpel:partnerLinks>
        <!-- The 'client' role represents the requester of this service. -->
        <bpel:partnerLink name="client"
                     partnerLinkType="tns:CommTestBP"
                     myRole="CommTestBPProvider"
                     />
        <bpel:partnerLink name="ConcertAdapter" partnerLinkType="tns:ConcertAdapterPLT" partnerRole="ConcertAdapterPLTRole"></bpel:partnerLink>
    </bpel:partnerLinks>
  
    <!-- ================================================================= -->         
    <!-- VARIABLES                                                         -->
    <!-- List of messages and XML documents used within this BPEL process  -->
    <!-- ================================================================= -->         
    <bpel:variables>
        <!-- Reference to the message passed as input during initiation -->
        <bpel:variable name="input"
                  messageType="tns:CommTestBPRequestMessage"/>
                  
        <!-- 
          Reference to the message that will be returned to the requester
          -->
        <bpel:variable name="output"
                  messageType="tns:CommTestBPResponseMessage"/>
        <bpel:variable name="resource_allocation_response" messageType="ns:invoke_adapterOutput"></bpel:variable>
        <bpel:variable name="resource_allocation_request" messageType="ns:invoke_adapterInput"></bpel:variable>
        <bpel:variable name="sendTopicMsgRequest" messageType="tns:sendTopicMsgRequest"></bpel:variable>
        <bpel:variable name="sendTopicMsgResponse" messageType="tns:sendTopicMsgResponse"></bpel:variable>
        <bpel:variable name="send_topic_response" messageType="ns:send_topic_msgOutput"></bpel:variable>
        <bpel:variable name="send_topic_request" messageType="ns:send_topic_msgInput"></bpel:variable>
        <bpel:variable name="sendActionMsgRequest" messageType="tns:sendActionMsgRequest"></bpel:variable>
        <bpel:variable name="sendActionMsgResponse" messageType="tns:sendActionMsgResponse"></bpel:variable>
        <bpel:variable name="send_action_response" messageType="ns:send_action_msgOutput"></bpel:variable>
        <bpel:variable name="send_action_request" messageType="ns:send_action_msgInput"></bpel:variable>
        <bpel:variable name="sendServiceMsgRequest" messageType="tns:sendServiceMsgRequest"></bpel:variable>
        <bpel:variable name="send_service_response" messageType="ns:send_service_msgOutput"></bpel:variable>
        <bpel:variable name="send_service_request" messageType="ns:send_service_msgInput"></bpel:variable>
        <bpel:variable name="sendServiceMsgResponse" messageType="tns:sendServiceMsgResponse"></bpel:variable>
    </bpel:variables>

    <!-- ================================================================= -->         
    <!-- ORCHESTRATION LOGIC                                               -->
    <!-- Set of activities coordinating the flow of messages across the    -->
    <!-- services integrated within this business process                  -->
    <!-- ================================================================= -->         
    <bpel:sequence name="main">
        
        <!-- Receive input from requester. 
             Note: This maps to operation defined in CommTestBP.wsdl 
             -->
        
        <bpel:pick name="InvokeBP" createInstance="yes">
            <bpel:onMessage partnerLink="client" operation="process" portType="tns:CommTestBP" variable="input">
                <bpel:sequence>
                    <bpel:assign validate="no" name="AssignLinkGraph">
                        <bpel:copy>
                            <bpel:from><bpel:literal xml:space="preserve"><tns:invoke_adapter xmlns:tns="http://smartylab.co.kr/products/op/adapter" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <tns:LinkGraph>
    <tns:name>tns:name</tns:name>
    <tns:nodes>
      <tns:Node>
        <tns:max>0</tns:max>
        <tns:min>0</tns:min>
        <tns:id>listener_app</tns:id>
        <tns:parameters>
          <tns:parameter>
            <tns:message>tns:message</tns:message>
            <tns:frequency>0</tns:frequency>
          </tns:parameter>
        </tns:parameters>
        <tns:uri>rocon:/*/listener_node#smartylab_rapps/listener_app</tns:uri>
      </tns:Node>
      <tns:Node>
        <tns:max>0</tns:max>
        <tns:min>0</tns:min>
        <tns:id>service_server_app</tns:id>
        <tns:parameters>
          <tns:parameter>
            <tns:message>tns:message</tns:message>
            <tns:frequency>0</tns:frequency>
          </tns:parameter>
        </tns:parameters>
        <tns:uri>rocon:/*/service_server_node#smartylab_rapps/service_server_app</tns:uri>
      </tns:Node>
      <tns:Node>
        <tns:max>0</tns:max>
        <tns:min>0</tns:min>
        <tns:id>action_server_app</tns:id>
        <tns:parameters>
          <tns:parameter>
            <tns:message>tns:message</tns:message>
            <tns:frequency>0</tns:frequency>
          </tns:parameter>
        </tns:parameters>
        <tns:uri>rocon:/*/action_server_node#smartylab_rapps/action_server_app</tns:uri>
      </tns:Node>
    </tns:nodes>
    <tns:topics>
      <tns:Topic>
        <tns:type>std_msgs/String</tns:type>
        <tns:id>chatter</tns:id>
      </tns:Topic>
    </tns:topics>
    <tns:actions>
      <tns:Action>
        <tns:type>actionlib_tutorials/FibonacciAction</tns:type>
        <tns:id>fibonacci_action</tns:id>
        <tns:goal_type>actionlib_tutorials/FibonacciGoal</tns:goal_type>
      </tns:Action>
    </tns:actions>
    <tns:services>
      <tns:Service>
        <tns:persistency>false</tns:persistency>
        <tns:type>rospy_tutorials/AddTwoInts</tns:type>
        <tns:id>add_two_int_service</tns:id>
      </tns:Service>
    </tns:services>
    <tns:edges>
      <tns:Edge>
        <tns:start>chatter</tns:start>
        <tns:finish>listener_app</tns:finish>
        <tns:remap_from>chatter</tns:remap_from>
        <tns:remap_to>/smartylab/chatter</tns:remap_to>
      </tns:Edge>
      <tns:Edge>
        <tns:start>fibonacci_action</tns:start>
        <tns:finish>action_server_app</tns:finish>
        <tns:remap_from>fibonacci</tns:remap_from>
        <tns:remap_to>/smartylab/fibonacci</tns:remap_to>
      </tns:Edge>
      <tns:Edge>
        <tns:start>add_two_int_service</tns:start>
        <tns:finish>service_server_app</tns:finish>
        <tns:remap_from>add_two_ints</tns:remap_from>
        <tns:remap_to>/smartylab/add_two_ints</tns:remap_to>
      </tns:Edge>
    </tns:edges>    
  </tns:LinkGraph>
</tns:invoke_adapter></bpel:literal></bpel:from>
                            <bpel:to variable="resource_allocation_request" part="parameters"></bpel:to>
                        </bpel:copy>
                        
                    </bpel:assign>
                    <bpel:invoke name="RequestToAllocateResources" partnerLink="ConcertAdapter" operation="invoke_adapter" portType="ns:concert_adapter_soap_serverPortType" inputVariable="resource_allocation_request" outputVariable="resource_allocation_response"></bpel:invoke>
                    <bpel:assign validate="no" name="AssignAllocationResult">
                        <bpel:copy>
                            <bpel:from part="parameters" variable="resource_allocation_response">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:out]]></bpel:query>
                            </bpel:from>
                            <bpel:to part="payload" variable="output">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:result]]></bpel:query>
                            </bpel:to>
                        </bpel:copy>
                    </bpel:assign>
                    <bpel:reply name="replyResourceAllocationResult" partnerLink="client" portType="tns:CommTestBP" operation="process" variable="output" />
                </bpel:sequence>
            </bpel:onMessage>
            <bpel:onMessage partnerLink="client" operation="sendTopicMsg" portType="tns:CommTestBP" variable="sendTopicMsgRequest">
                <bpel:sequence>
                    <bpel:assign validate="no" name="AssignTopicMsg">
                        
                        <bpel:copy>
                            <bpel:from><bpel:literal xml:space="preserve"><tns:send_topic_msg xmlns:tns="http://smartylab.co.kr/products/op/adapter" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <tns:namespace>/smartylab/chatter</tns:namespace>
  <tns:message_val>{&quot;data&quot;: &quot;HelloBPEL&quot;}</tns:message_val>
</tns:send_topic_msg></bpel:literal></bpel:from>
                            <bpel:to variable="send_topic_request" part="parameters"></bpel:to>
                        </bpel:copy>
                        
                    </bpel:assign>
                    <bpel:invoke name="RequestToSendTopicMsg" partnerLink="ConcertAdapter" operation="send_topic_msg" portType="ns:concert_adapter_soap_serverPortType" inputVariable="send_topic_request" outputVariable="send_topic_response"></bpel:invoke>
                    <bpel:assign validate="no" name="AssignTopicSendResult">
                        <bpel:copy>
                            <bpel:from part="parameters" variable="send_topic_response">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:out]]></bpel:query>
                            </bpel:from>
                            <bpel:to part="parameters" variable="sendTopicMsgResponse">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:out]]></bpel:query>
                            </bpel:to>
                        </bpel:copy>
                    </bpel:assign>
                    <bpel:reply name="replayTopicSendResult" partnerLink="client" operation="sendTopicMsg" portType="tns:CommTestBP" variable="sendTopicMsgResponse"></bpel:reply>
                </bpel:sequence>
            </bpel:onMessage>
            <bpel:onMessage partnerLink="client" operation="sendActionMsg" portType="tns:CommTestBP" variable="sendActionMsgRequest">
                <bpel:sequence>
                    <bpel:assign validate="no" name="AssignActionMsg">
                        <bpel:copy>
                            <bpel:from><bpel:literal xml:space="preserve"><tns:send_action_msg xmlns:tns="http://smartylab.co.kr/products/op/adapter" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <tns:namespace>/smartylab/fibonacci</tns:namespace>
  <tns:message_val>{&quot;order&quot;:5}</tns:message_val>
</tns:send_action_msg></bpel:literal></bpel:from>
                            <bpel:to variable="send_action_request" part="parameters"></bpel:to>
                        </bpel:copy>
                        
                    </bpel:assign>
                    <bpel:invoke name="RequestToSendActionMsg" partnerLink="ConcertAdapter" operation="send_action_msg" portType="ns:concert_adapter_soap_serverPortType" inputVariable="send_action_request" outputVariable="send_action_response"></bpel:invoke>
                    <bpel:assign validate="no" name="AssignActionSendResult">
                        <bpel:copy>
                            <bpel:from part="parameters" variable="send_action_response">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ns:out]]></bpel:query>
                            </bpel:from>
                            <bpel:to part="parameters" variable="sendActionMsgResponse">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:out]]></bpel:query>
                            </bpel:to>
                        </bpel:copy>
                    </bpel:assign>
                    <bpel:reply name="replyActionSendResult" partnerLink="client" operation="sendActionMsg" portType="tns:CommTestBP" variable="sendActionMsgResponse"></bpel:reply>
                </bpel:sequence>
            </bpel:onMessage>
            <bpel:onMessage partnerLink="client" operation="sendServiceMsg" portType="tns:CommTestBP" variable="sendServiceMsgRequest">
                <bpel:sequence>
                    <bpel:assign validate="no" name="AssignServiceMsg">
                        <bpel:copy>
                            <bpel:from><bpel:literal xml:space="preserve"><tns:send_service_msg xmlns:tns="http://smartylab.co.kr/products/op/adapter" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <tns:namespace>/smartylab/add_two_ints</tns:namespace>
  <tns:message_val>{&quot;a&quot;:100, &quot;b&quot;:12}</tns:message_val>
</tns:send_service_msg></bpel:literal></bpel:from>
                            <bpel:to variable="send_service_request" part="parameters"></bpel:to>
                        </bpel:copy>
                        
                    </bpel:assign>
                    <bpel:invoke name="RequestToSendServiceMsg" partnerLink="ConcertAdapter" operation="send_service_msg" portType="ns:concert_adapter_soap_serverPortType" inputVariable="send_service_request" outputVariable="send_service_response"></bpel:invoke>
                    <bpel:assign validate="no" name="AssignServiceSendResult">
                        
                        <bpel:copy>
                            <bpel:from part="parameters" variable="sendServiceMsgResponse">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:out]]></bpel:query>
                            </bpel:from>
                            <bpel:to part="parameters" variable="sendServiceMsgResponse">
                                <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:out]]></bpel:query>
                            </bpel:to>
                        </bpel:copy>
                    </bpel:assign>
                    <bpel:reply name="replyServiceSendResult" partnerLink="client" operation="sendServiceMsg" portType="tns:CommTestBP" variable="sendServiceMsgResponse"></bpel:reply>
                </bpel:sequence>
            </bpel:onMessage>
        </bpel:pick>
        
        <!-- Generate reply to synchronous request -->
        
    </bpel:sequence>
</bpel:process>

